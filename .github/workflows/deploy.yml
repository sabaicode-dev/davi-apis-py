name: Deploy to EC2

on:
  push:
    branches:
      - sophearum  # Deploy only when pushing to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH to access EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 3: Verify docker-compose.yml exists in the root (optional, but ensures correctness)
      - name: Verify docker-compose.yml Exists
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "Warning: docker-compose.yml not found in the root directory."
          fi

      # Step 4: Compress project files and upload to EC2
      - name: Compress and upload project to EC2
        run: |
          # Create a temporary directory and copy all project files (excluding unwanted files)
          mkdir -p temp_dir
          rsync -a --exclude='.git' --exclude='.github' . temp_dir/
          
          # Compress the temp directory into app.tar.gz
          tar -czf app.tar.gz -C temp_dir .  
          
          # Clean up the temp directory
          rm -rf temp_dir

          # Copy the compressed tar file to EC2 instance
          scp -o StrictHostKeyChecking=no app.tar.gz ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/

      # Step 5: Optionally remove the old app directory and upload new files
      - name: Upload project files to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            # Navigate to the app directory
            cd /home/${{ secrets.AWS_EC2_USER }}

            # Remove the old app folder and extract the new code
            rm -rf app
            mkdir app
            tar -xzf app.tar.gz -C app
            # Clean up the compressed tar file after extraction
            rm app.tar.gz
          EOF
