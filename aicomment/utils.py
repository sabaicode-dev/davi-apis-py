import os
import requests
from pymongo import MongoClient
from dotenv import load_dotenv

# Load environment variables
load_dotenv('.env')

# Fetch environment variables
openai_api_key = os.getenv("OPENAI_API_KEY")
mongo_uri = os.getenv("MONGO_URI")
database_name = os.getenv("MONGO_DB_NAME")
collection_name = os.getenv("MONGO_COLLECTION_NAME")

# MongoDB client setup
client = MongoClient(mongo_uri)
db = client[database_name]
collection = db[collection_name]

def ai_query_to_db(file_id: str, query: str) -> dict:
    """
    This function will process the user's query, convert it into a MongoDB query,
    and retrieve the relevant data for the given file_id from MongoDB.
    """
    try:
        # Prepare the prompt to send to OpenAI
        prompt = f"Given the following query: '{query}', generate a MongoDB query to search for data associated with the file_id: {file_id} in the dataset."

        # Send the prompt to OpenAI API for query interpretation
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {openai_api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}]
        }

        response = requests.post(url, headers=headers, json=payload)

        if response.status_code == 200:
            response_data = response.json()
            ai_query = response_data['choices'][0]['message']['content'].strip()

            if ai_query:
                # Execute the query using MongoDB (assuming AI response is in valid MongoDB query format)
                query_object = eval(ai_query)  # Convert string to dictionary (ensure it's safe in production)
                result = collection.find(query_object)

                # Return the result as a list of documents
                return list(result)
            else:
                return {"error": "No query generated by AI."}
        else:
            return {"error": f"API call failed with status code {response.status_code}"}
    except Exception as e:
        print(f"Error while processing query: {e}")
        return {"error": "An error occurred while processing the query."}

def generate_response_for_user(file_id: str, query: str) -> str:
    """
    Main function to generate a response based on file_id and query.
    """
    result = ai_query_to_db(file_id, query)

    if "error" in result:
        return result["error"]
    else:
        if len(result) > 0:
            books = [f"Title: {doc['title']}, Author: {doc['author']}" for doc in result]
            return "\n".join(books)
        else:
            return "No results found."
